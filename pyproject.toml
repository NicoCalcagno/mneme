[project]
name = "mneme"
version = "0.1.0"
description = "Trasforma il tuo vault Obsidian in un cervello digitale interrogabile con RAG"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = {text = "MIT"}
keywords = ["rag", "obsidian", "chatbot", "ai", "llm", "vector-store"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core Framework
    "datapizza-ai>=0.0.2",
    "datapizza-ai-clients-openai>=0.0.2",
    "datapizza-ai-clients-anthropic>=0.0.2",

    # API Framework
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.1.0",

    # Utilities
    "python-dotenv>=1.0.0",  # ✅ Già presente
    "loguru>=0.7.2",
    "python-multipart>=0.0.9",

    # Markdown & Obsidian parsing
    "markdown>=3.5.0",
    "pyyaml>=6.0.1",
    "python-frontmatter>=1.1.0",

    # Vector Store
    "qdrant-client>=1.7.0",  # ✅ Già presente

    # Optional: Local embeddings
    # "sentence-transformers>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "httpx>=0.26.0",  # For FastAPI testing
]

local = [
    "sentence-transformers>=2.3.0",
    "torch>=2.1.0",
]

all = [
    "mneme[dev,local]",
]

[project.scripts]
mneme-ingest = "mneme.ingestion.ingest:main"
mneme-serve = "mneme.api.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/mneme"
Documentation = "https://github.com/yourusername/mneme#readme"
Repository = "https://github.com/yourusername/mneme"
Issues = "https://github.com/yourusername/mneme/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["api", "config", "ingestion", "rag", "utils"]

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=mneme --cov-report=term-missing"